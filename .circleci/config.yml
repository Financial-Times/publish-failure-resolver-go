version: 2.1
orbs:
  golang-ci: financial-times/golang-ci@1.0.0

workflows:
  version: 2.1
  tests_and_docker:
    jobs:
      - golang-ci/build-and-test:
          name: build-and-test-project

      - golang-ci/docker-build:
          name: build-docker-image
          requires:
            - build-and-test-project

  scanning:
    jobs:
      - golang-ci/scan:
          name: scan-dependencies
          context: org-global


#version: 2
#jobs:
#  build:
#    working_directory: /go/src/github.com/Financial-Times/publish-failure-resolver-go
#    docker:
#      - image: golang:1.10
#        environment:
#          GOPATH: /go
#          CIRCLE_TEST_REPORTS: /tmp/test-results
#          CIRCLE_COVERAGE_REPORT: /tmp/coverage-results
#    steps:
#      - checkout
#      - run:
#          name: External Dependencies
#          command: |
#            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#            go get -u github.com/mattn/goveralls
#            go get -u github.com/jstemmer/go-junit-report
#      - run:
#          name: Test Results
#          command: |
#            mkdir -p ${CIRCLE_TEST_REPORTS}
#            mkdir -p ${CIRCLE_COVERAGE_REPORT}
#      - run:
#          name: Importing libraries
#          command: dep ensure -v -vendor-only
#      - run:
#          name: Go Build
#          command: go build -v
#      - run:
#          name: Run Tests
#          command: |
#            go test -race -cover -coverprofile=${CIRCLE_COVERAGE_REPORT}/coverage.out ./... | go-junit-report > ${CIRCLE_TEST_REPORTS}/junit.xml
#      - run:
#          name: Upload Coverage
#          command: goveralls -coverprofile=${CIRCLE_COVERAGE_REPORT}/coverage.out -service=circle-ci -repotoken=${COVERALLS_TOKEN}
#      - store_test_results:
#          path: /tmp/test-results
#workflows:
#  version: 2
#  test-and-build-docker:
#    jobs:
#      - build
